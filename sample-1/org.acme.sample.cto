/**
 * business network definition.
 */
namespace org.acme.sample

asset Sensor identified by teamID {
  //create your Team asset model
  //后添加的内容
  o String teamID// - 这将是分配给您的团队的值。（已经分配！）
  o String teamName// - 这可以是任何值！构想一个合适的名称！
  o Double sensorTemp// - 来自 Raspberry Pi 的温度将存储在这里。
  o Double thermostatTemp// - 您将为恒温器创建一个温度。
  o String recommendation// - 将基于 CompareWeather 事务来填充此属性。

}

transaction SetSensorTemp {
  //create your SetSensorTemp transaction model
  --> Sensor gauge// - 事务需要将数据放在 Sensor 资产中。这会传递该资产的引用，以便我们在事务的逻辑中处理该资产。
  o Double newSensorValue// - 将根据从用于获取温度的 NodeRed 传感器传入事务中的温度来设置该变量。

}

transaction ChangeThermostatTemp {
  //create your ChangeThermostatTemp transaction model
  --> Sensor thermostat// - 事务需要将数据放入恒温器的 Sensor 资产中。这会传递该资产的引用，以便我们在事务的逻辑中处理该资产。
  o Double newThermostatValue// - 可通过它将一个新的建议值发送到事务中。在 logic 选项卡中，我们将使用此值与温度计显示的值进行比较，确定是否应调节恒温器的值。

}

transaction CompareWeather{
  //create your CompareWeather transaction model
  --> Sensor recommend// - 事务需要将数据放入 Sensor 资产中。这会传递该资产的引用，以便我们在事务的逻辑中处理该资产。
  o Double outsideTemp/* - 查看 WeatherUnderground.com API 中的条件，可以看到该调用可能返回的所有可能数据。基于该数据，决定根据室外实际温度和体感温度来推荐恒温器设置。此变量存储通过 NodeRed 从 Weather.com 传给它的室外温度值。  API 页面上的模型显示了返回的数据是摄氏度还是华氏度，以及它的变量类型。在本练习中，我们将使用摄氏度。*/
  o Double feelsLike// - 此变量存储来自 Weather.com 的 feels_like 值。

}